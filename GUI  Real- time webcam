import tkinter as tk
from tkinter import Label, Button
from PIL import Image, ImageTk
from ultralytics import YOLO
import cv2


model = YOLO("best.pt")  


violation_classes = ['Crop_Top', 'Miniskirt', 'Shorts', 'Sleeveless', 'low_neckline', 'ripped_pants']
class_names = model.names  


class DressCodeCamApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üì∑ Dress Code Detector (Webcam)")

        self.image_label = Label(root)
        self.image_label.pack()
        self.status_label = Label(root, text="Starting webcam...", font=("Arial", 12))
        self.status_label.pack(pady=10)

        Button(root, text="Exit", command=self.close_app).pack()

        self.cap = cv2.VideoCapture(0)  
        self.update_frame()

    def update_frame(self):
        ret, frame = self.cap.read()
        if not ret:
            self.status_label.config(text="Failed to access camera.", fg="red")
            return

        results = model.predict(source=frame, save=False, conf=0.4)[0]
        detected_classes = [int(cls) for cls in results.boxes.cls]
        violations = [class_names[c] for c in detected_classes if class_names[c] in violation_classes]

        
        for box, cls in zip(results.boxes.xyxy, results.boxes.cls):
            x1, y1, x2, y2 = map(int, box)
            label = class_names[int(cls)]
            color = (0, 0, 255) if label in violation_classes else (0, 255, 0)
            cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)
            cv2.putText(frame, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

        
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        img_pil = Image.fromarray(frame_rgb)
        img_pil = img_pil.resize((700, 500))  
        img_tk = ImageTk.PhotoImage(img_pil)

        self.image_label.configure(image=img_tk)
        self.image_label.image = img_tk

        
        if violations:
            self.status_label.config(text="‚ùå Violation Detected: " + ", ".join(violations), fg="red")
        else:
            self.status_label.config(text="‚úÖ Dress Code OK", fg="green")

        self.root.after(30, self.update_frame)  # loop every 30 ms (~30 FPS)

    def close_app(self):
        self.cap.release()
        self.root.quit()


if __name__ == "__main__":
    root = tk.Tk()
    app = DressCodeCamApp(root)
    root.mainloop()
